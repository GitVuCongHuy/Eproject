// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250616101753_add_database")]
    partial class add_database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Accounts", b =>
                {
                    b.Property<int>("account_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("account_id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<int>("customer_id1")
                        .HasColumnType("int");

                    b.HasKey("account_id");

                    b.HasIndex("customer_id1");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Bank", b =>
                {
                    b.Property<int>("bank_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bank_id"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bank_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("bank_id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customer_id"));

                    b.Property<int>("bank_id")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("locked")
                        .HasColumnType("bit");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("customer_id");

                    b.HasIndex("bank_id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Login_attempts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<int>("customer_id1")
                        .HasColumnType("int");

                    b.Property<string>("device")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("number_login")
                        .HasColumnType("int");

                    b.Property<bool>("success")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("customer_id1");

                    b.ToTable("Login_Attempts");
                });

            modelBuilder.Entity("Service_request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("request_date");

                    b.Property<string>("RequestDetail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("request_detail");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("request_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("RequestId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Service_requests");
                });

            modelBuilder.Entity("Statements", b =>
                {
                    b.Property<int>("statement_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("statement_id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("GeneratedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("account_id")
                        .HasColumnType("int");

                    b.Property<int>("accountsaccount_id")
                        .HasColumnType("int");

                    b.HasKey("statement_id");

                    b.HasIndex("accountsaccount_id");

                    b.ToTable("statements");
                });

            modelBuilder.Entity("Transaction_passwords", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<int>("customer_id1")
                        .HasColumnType("int");

                    b.Property<int>("transaction_password")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("customer_id1");

                    b.ToTable("transaction_Passwords");
                });

            modelBuilder.Entity("Accounts", b =>
                {
                    b.HasOne("Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.HasOne("Bank", "bank")
                        .WithMany()
                        .HasForeignKey("bank_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bank");
                });

            modelBuilder.Entity("Login_attempts", b =>
                {
                    b.HasOne("Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Service_request", b =>
                {
                    b.HasOne("Customer", "customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Statements", b =>
                {
                    b.HasOne("Accounts", "accounts")
                        .WithMany()
                        .HasForeignKey("accountsaccount_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accounts");
                });

            modelBuilder.Entity("Transaction_passwords", b =>
                {
                    b.HasOne("Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });
#pragma warning restore 612, 618
        }
    }
}
